# -*- coding: utf-8 -*-
"""Helmholtz

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5SNLiIyMfwCmuGIVW4-4Tndqcjxaiw2

**Método pseudo-espectral**
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.linalg import lu_factor, lu_solve

4#Numero de colocación
N = eval(input("Numer of colocations points:"  ))
Nx = eval(input("Numer of grid points:"  ))
lamb = eval(input("lambda = 4.0 default:" ))

#FUNCIONES DE CHEBYSHEV
def cheby(m,r):
  cheby0 = 1
  cheby1 = r
  chebyn = 0
  if m == 0:
    cheby = cheby0
  elif m == 1:
    cheby = cheby1
  elif m >= 2:
    for i in range(2, m+1):
      chebyn = 2*r*cheby1 - cheby0
      cheby0 = cheby1
      cheby1 = chebyn
    cheby = chebyn
  return cheby 
#print(cheby(2,r))

#DERIVADAS DE CHEBYSHEV
def dcheby(m,r):
  dcheby0 = 0
  dcheby1 = 1
  dchebyn = 0
  if m == 0:
    dcheby = dcheby0
  elif m == 1:
    dcheby = dcheby1
  elif m >= 2:
    for i in range(2,m+1):
      dchebyn = 2*cheby(i-1,r) + 2*r*dcheby1 - dcheby0
      dcheby0 = dcheby1
      dcheby1 = dchebyn
  dcheby = dchebyn
  return dcheby 
#print(dcheby(2,r))

#SEGUNDAS DERIVADAS DE CHEBYSHEV
def ddcheby(m,r):
  ddcheby0 = 0
  ddcheby1 = 0
  ddchebyn = 0
  if m == 0:
    ddcheby = ddcheby0
  elif m == 1:
    ddcheby = ddcheby1
  elif m >= 2:
    for i in range(2,m+1):
      ddchebyn = 4*dcheby(i-1,r) + 2*r*ddcheby1 - ddcheby0
      ddcheby0 = ddcheby1
      ddcheby1 = ddchebyn
  ddcheby = ddchebyn
  return ddcheby 
#print(ddcheby(1,x))

def exacta(r):
  y = (-3.0/(8.0*(np.exp(2) + np.exp(-2))))*(np.exp(2*r) 
        + np.exp(-2*r)) +(1/4)*r*r + (1/8)  
  return y

def f(r):
  y = r*r
  return y

#Puntos de colocación 
x = np.zeros((N+1))
for i in range(0, N + 1):
  x[i]= np.cos(np.pi*i/N)
print(x)

#Matriz A
A = np.zeros((N+1, N+1))
for i in range(0,N+1):
  for l in range(0,N+1):
    if i == 0 or i == N :
      A[i,l] = cheby(l, x[i])
    else: 
      A[i,l] = -ddcheby(l,x[i]) + lamb*cheby(l,x[i])

#DEFINIR EL VECTOR b
b = np.zeros(N+1)
for  i in range (0,N+1):
  if i == 0  or i == N :
    b[i] = 0
  else:
    b[i] = f(x[i]) #Con i+1 me da un error fuera de rango

#Operar para encontrar el vector solución b:
lu, piv = lu_factor(A)
solve = lu_solve((lu, piv), b)

#Graficar
xmax = 1
xmin = -1
dx = (xmax - xmin)/Nx
y = np.zeros(Nx+1)
solution = []

for i in range(0,Nx+1):
    y[i]= xmin + i*dx

for i in range(0,Nx+1):
  suma = 0
  for l in range(0,N):
    suma += solve[l+1]*cheby(l,y[i]) 
  solution.append(suma)

exact = []
for i in range(0,Nx+1):
    exact.append(exacta(y[i]))

plt.plot(y,solution, label = 'Numerica') 
plt.plot(y,exact, label = 'Exacta')
plt.show()